// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  book: (where?: BookWhereInput) => Promise<boolean>;
  bookPublishingInfo: (
    where?: BookPublishingInfoWhereInput
  ) => Promise<boolean>;
  owner: (where?: OwnerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  book: (where: BookWhereUniqueInput) => BookNullablePromise;
  books: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Book>;
  booksConnection: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookConnectionPromise;
  bookPublishingInfo: (
    where: BookPublishingInfoWhereUniqueInput
  ) => BookPublishingInfoNullablePromise;
  bookPublishingInfoes: (args?: {
    where?: BookPublishingInfoWhereInput;
    orderBy?: BookPublishingInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BookPublishingInfo>;
  bookPublishingInfoesConnection: (args?: {
    where?: BookPublishingInfoWhereInput;
    orderBy?: BookPublishingInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookPublishingInfoConnectionPromise;
  owner: (where: OwnerWhereUniqueInput) => OwnerNullablePromise;
  owners: (args?: {
    where?: OwnerWhereInput;
    orderBy?: OwnerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Owner>;
  ownersConnection: (args?: {
    where?: OwnerWhereInput;
    orderBy?: OwnerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OwnerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBook: (data: BookCreateInput) => BookPromise;
  updateBook: (args: {
    data: BookUpdateInput;
    where: BookWhereUniqueInput;
  }) => BookPromise;
  updateManyBooks: (args: {
    data: BookUpdateManyMutationInput;
    where?: BookWhereInput;
  }) => BatchPayloadPromise;
  upsertBook: (args: {
    where: BookWhereUniqueInput;
    create: BookCreateInput;
    update: BookUpdateInput;
  }) => BookPromise;
  deleteBook: (where: BookWhereUniqueInput) => BookPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createBookPublishingInfo: (
    data: BookPublishingInfoCreateInput
  ) => BookPublishingInfoPromise;
  updateBookPublishingInfo: (args: {
    data: BookPublishingInfoUpdateInput;
    where: BookPublishingInfoWhereUniqueInput;
  }) => BookPublishingInfoPromise;
  updateManyBookPublishingInfoes: (args: {
    data: BookPublishingInfoUpdateManyMutationInput;
    where?: BookPublishingInfoWhereInput;
  }) => BatchPayloadPromise;
  upsertBookPublishingInfo: (args: {
    where: BookPublishingInfoWhereUniqueInput;
    create: BookPublishingInfoCreateInput;
    update: BookPublishingInfoUpdateInput;
  }) => BookPublishingInfoPromise;
  deleteBookPublishingInfo: (
    where: BookPublishingInfoWhereUniqueInput
  ) => BookPublishingInfoPromise;
  deleteManyBookPublishingInfoes: (
    where?: BookPublishingInfoWhereInput
  ) => BatchPayloadPromise;
  createOwner: (data: OwnerCreateInput) => OwnerPromise;
  updateOwner: (args: {
    data: OwnerUpdateInput;
    where: OwnerWhereUniqueInput;
  }) => OwnerPromise;
  updateManyOwners: (args: {
    data: OwnerUpdateManyMutationInput;
    where?: OwnerWhereInput;
  }) => BatchPayloadPromise;
  upsertOwner: (args: {
    where: OwnerWhereUniqueInput;
    create: OwnerCreateInput;
    update: OwnerUpdateInput;
  }) => OwnerPromise;
  deleteOwner: (where: OwnerWhereUniqueInput) => OwnerPromise;
  deleteManyOwners: (where?: OwnerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  bookPublishingInfo: (
    where?: BookPublishingInfoSubscriptionWhereInput
  ) => BookPublishingInfoSubscriptionPayloadSubscription;
  owner: (
    where?: OwnerSubscriptionWhereInput
  ) => OwnerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sourceId_ASC"
  | "sourceId_DESC"
  | "ownerId_ASC"
  | "ownerId_DESC"
  | "price_ASC"
  | "price_DESC"
  | "condition_ASC"
  | "condition_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "contact_ASC"
  | "contact_DESC"
  | "location_ASC"
  | "location_DESC";

export type BookPublishingInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "image_ASC"
  | "image_DESC"
  | "author_ASC"
  | "author_DESC"
  | "rating_ASC"
  | "rating_DESC";

export type OwnerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "avatar_ASC"
  | "avatar_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface BookUpdateInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
}

export type BookWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput;
  data: BookUpdateManyDataInput;
}

export interface BookPublishingInfoCreateInput {
  id?: Maybe<ID_Input>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<String>;
  availableBooks?: Maybe<BookCreateManyInput>;
}

export interface OwnerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  alias?: Maybe<String>;
  alias_not?: Maybe<String>;
  alias_in?: Maybe<String[] | String>;
  alias_not_in?: Maybe<String[] | String>;
  alias_lt?: Maybe<String>;
  alias_lte?: Maybe<String>;
  alias_gt?: Maybe<String>;
  alias_gte?: Maybe<String>;
  alias_contains?: Maybe<String>;
  alias_not_contains?: Maybe<String>;
  alias_starts_with?: Maybe<String>;
  alias_not_starts_with?: Maybe<String>;
  alias_ends_with?: Maybe<String>;
  alias_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  ownedBooks_every?: Maybe<BookWhereInput>;
  ownedBooks_some?: Maybe<BookWhereInput>;
  ownedBooks_none?: Maybe<BookWhereInput>;
  AND?: Maybe<OwnerWhereInput[] | OwnerWhereInput>;
  OR?: Maybe<OwnerWhereInput[] | OwnerWhereInput>;
  NOT?: Maybe<OwnerWhereInput[] | OwnerWhereInput>;
}

export interface BookUpdateManyMutationInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
}

export interface OwnerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OwnerWhereInput>;
  AND?: Maybe<OwnerSubscriptionWhereInput[] | OwnerSubscriptionWhereInput>;
  OR?: Maybe<OwnerSubscriptionWhereInput[] | OwnerSubscriptionWhereInput>;
  NOT?: Maybe<OwnerSubscriptionWhereInput[] | OwnerSubscriptionWhereInput>;
}

export interface BookSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookWhereInput>;
  AND?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  OR?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  NOT?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
}

export interface BookScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
  sourceId_not?: Maybe<ID_Input>;
  sourceId_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_not_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_lt?: Maybe<ID_Input>;
  sourceId_lte?: Maybe<ID_Input>;
  sourceId_gt?: Maybe<ID_Input>;
  sourceId_gte?: Maybe<ID_Input>;
  sourceId_contains?: Maybe<ID_Input>;
  sourceId_not_contains?: Maybe<ID_Input>;
  sourceId_starts_with?: Maybe<ID_Input>;
  sourceId_not_starts_with?: Maybe<ID_Input>;
  sourceId_ends_with?: Maybe<ID_Input>;
  sourceId_not_ends_with?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  ownerId_not?: Maybe<ID_Input>;
  ownerId_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_not_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_lt?: Maybe<ID_Input>;
  ownerId_lte?: Maybe<ID_Input>;
  ownerId_gt?: Maybe<ID_Input>;
  ownerId_gte?: Maybe<ID_Input>;
  ownerId_contains?: Maybe<ID_Input>;
  ownerId_not_contains?: Maybe<ID_Input>;
  ownerId_starts_with?: Maybe<ID_Input>;
  ownerId_not_starts_with?: Maybe<ID_Input>;
  ownerId_ends_with?: Maybe<ID_Input>;
  ownerId_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  condition?: Maybe<String>;
  condition_not?: Maybe<String>;
  condition_in?: Maybe<String[] | String>;
  condition_not_in?: Maybe<String[] | String>;
  condition_lt?: Maybe<String>;
  condition_lte?: Maybe<String>;
  condition_gt?: Maybe<String>;
  condition_gte?: Maybe<String>;
  condition_contains?: Maybe<String>;
  condition_not_contains?: Maybe<String>;
  condition_starts_with?: Maybe<String>;
  condition_not_starts_with?: Maybe<String>;
  condition_ends_with?: Maybe<String>;
  condition_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  AND?: Maybe<BookScalarWhereInput[] | BookScalarWhereInput>;
  OR?: Maybe<BookScalarWhereInput[] | BookScalarWhereInput>;
  NOT?: Maybe<BookScalarWhereInput[] | BookScalarWhereInput>;
}

export type BookPublishingInfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookUpsertWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput;
  update: BookUpdateDataInput;
  create: BookCreateInput;
}

export interface BookPublishingInfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  rating?: Maybe<String>;
  rating_not?: Maybe<String>;
  rating_in?: Maybe<String[] | String>;
  rating_not_in?: Maybe<String[] | String>;
  rating_lt?: Maybe<String>;
  rating_lte?: Maybe<String>;
  rating_gt?: Maybe<String>;
  rating_gte?: Maybe<String>;
  rating_contains?: Maybe<String>;
  rating_not_contains?: Maybe<String>;
  rating_starts_with?: Maybe<String>;
  rating_not_starts_with?: Maybe<String>;
  rating_ends_with?: Maybe<String>;
  rating_not_ends_with?: Maybe<String>;
  availableBooks_every?: Maybe<BookWhereInput>;
  availableBooks_some?: Maybe<BookWhereInput>;
  availableBooks_none?: Maybe<BookWhereInput>;
  AND?: Maybe<BookPublishingInfoWhereInput[] | BookPublishingInfoWhereInput>;
  OR?: Maybe<BookPublishingInfoWhereInput[] | BookPublishingInfoWhereInput>;
  NOT?: Maybe<BookPublishingInfoWhereInput[] | BookPublishingInfoWhereInput>;
}

export interface BookUpdateDataInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
}

export interface OwnerCreateInput {
  id?: Maybe<ID_Input>;
  alias: String;
  avatar?: Maybe<String>;
  ownedBooks?: Maybe<BookCreateManyInput>;
}

export interface BookUpdateManyDataInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
}

export interface BookPublishingInfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookPublishingInfoWhereInput>;
  AND?: Maybe<
    | BookPublishingInfoSubscriptionWhereInput[]
    | BookPublishingInfoSubscriptionWhereInput
  >;
  OR?: Maybe<
    | BookPublishingInfoSubscriptionWhereInput[]
    | BookPublishingInfoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | BookPublishingInfoSubscriptionWhereInput[]
    | BookPublishingInfoSubscriptionWhereInput
  >;
}

export interface BookCreateInput {
  id?: Maybe<ID_Input>;
  sourceId: ID_Input;
  ownerId: ID_Input;
  price: String;
  condition: String;
  comment?: Maybe<String>;
  contact: String;
  location?: Maybe<String>;
}

export interface OwnerUpdateInput {
  alias?: Maybe<String>;
  avatar?: Maybe<String>;
  ownedBooks?: Maybe<BookUpdateManyInput>;
}

export interface BookCreateManyInput {
  create?: Maybe<BookCreateInput[] | BookCreateInput>;
  connect?: Maybe<BookWhereUniqueInput[] | BookWhereUniqueInput>;
}

export interface BookPublishingInfoUpdateInput {
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<String>;
  availableBooks?: Maybe<BookUpdateManyInput>;
}

export interface BookUpdateManyInput {
  create?: Maybe<BookCreateInput[] | BookCreateInput>;
  update?: Maybe<
    | BookUpdateWithWhereUniqueNestedInput[]
    | BookUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | BookUpsertWithWhereUniqueNestedInput[]
    | BookUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<BookWhereUniqueInput[] | BookWhereUniqueInput>;
  connect?: Maybe<BookWhereUniqueInput[] | BookWhereUniqueInput>;
  set?: Maybe<BookWhereUniqueInput[] | BookWhereUniqueInput>;
  disconnect?: Maybe<BookWhereUniqueInput[] | BookWhereUniqueInput>;
  deleteMany?: Maybe<BookScalarWhereInput[] | BookScalarWhereInput>;
  updateMany?: Maybe<
    BookUpdateManyWithWhereNestedInput[] | BookUpdateManyWithWhereNestedInput
  >;
}

export interface BookUpdateWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput;
  data: BookUpdateDataInput;
}

export interface BookWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
  sourceId_not?: Maybe<ID_Input>;
  sourceId_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_not_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_lt?: Maybe<ID_Input>;
  sourceId_lte?: Maybe<ID_Input>;
  sourceId_gt?: Maybe<ID_Input>;
  sourceId_gte?: Maybe<ID_Input>;
  sourceId_contains?: Maybe<ID_Input>;
  sourceId_not_contains?: Maybe<ID_Input>;
  sourceId_starts_with?: Maybe<ID_Input>;
  sourceId_not_starts_with?: Maybe<ID_Input>;
  sourceId_ends_with?: Maybe<ID_Input>;
  sourceId_not_ends_with?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  ownerId_not?: Maybe<ID_Input>;
  ownerId_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_not_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_lt?: Maybe<ID_Input>;
  ownerId_lte?: Maybe<ID_Input>;
  ownerId_gt?: Maybe<ID_Input>;
  ownerId_gte?: Maybe<ID_Input>;
  ownerId_contains?: Maybe<ID_Input>;
  ownerId_not_contains?: Maybe<ID_Input>;
  ownerId_starts_with?: Maybe<ID_Input>;
  ownerId_not_starts_with?: Maybe<ID_Input>;
  ownerId_ends_with?: Maybe<ID_Input>;
  ownerId_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  condition?: Maybe<String>;
  condition_not?: Maybe<String>;
  condition_in?: Maybe<String[] | String>;
  condition_not_in?: Maybe<String[] | String>;
  condition_lt?: Maybe<String>;
  condition_lte?: Maybe<String>;
  condition_gt?: Maybe<String>;
  condition_gte?: Maybe<String>;
  condition_contains?: Maybe<String>;
  condition_not_contains?: Maybe<String>;
  condition_starts_with?: Maybe<String>;
  condition_not_starts_with?: Maybe<String>;
  condition_ends_with?: Maybe<String>;
  condition_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  AND?: Maybe<BookWhereInput[] | BookWhereInput>;
  OR?: Maybe<BookWhereInput[] | BookWhereInput>;
  NOT?: Maybe<BookWhereInput[] | BookWhereInput>;
}

export interface OwnerUpdateManyMutationInput {
  alias?: Maybe<String>;
  avatar?: Maybe<String>;
}

export type OwnerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookPublishingInfoUpdateManyMutationInput {
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BookPublishingInfoSubscriptionPayload {
  mutation: MutationType;
  node: BookPublishingInfo;
  updatedFields: String[];
  previousValues: BookPublishingInfoPreviousValues;
}

export interface BookPublishingInfoSubscriptionPayloadPromise
  extends Promise<BookPublishingInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPublishingInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPublishingInfoPreviousValuesPromise>() => T;
}

export interface BookPublishingInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookPublishingInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookPublishingInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPublishingInfoPreviousValuesSubscription>() => T;
}

export interface BookPublishingInfoEdge {
  node: BookPublishingInfo;
  cursor: String;
}

export interface BookPublishingInfoEdgePromise
  extends Promise<BookPublishingInfoEdge>,
    Fragmentable {
  node: <T = BookPublishingInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookPublishingInfoEdgeSubscription
  extends Promise<AsyncIterator<BookPublishingInfoEdge>>,
    Fragmentable {
  node: <T = BookPublishingInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OwnerPreviousValues {
  id: ID_Output;
  alias: String;
  avatar?: String;
}

export interface OwnerPreviousValuesPromise
  extends Promise<OwnerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface OwnerPreviousValuesSubscription
  extends Promise<AsyncIterator<OwnerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface BookPublishingInfoConnection {
  pageInfo: PageInfo;
  edges: BookPublishingInfoEdge[];
}

export interface BookPublishingInfoConnectionPromise
  extends Promise<BookPublishingInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookPublishingInfoEdge>>() => T;
  aggregate: <T = AggregateBookPublishingInfoPromise>() => T;
}

export interface BookPublishingInfoConnectionSubscription
  extends Promise<AsyncIterator<BookPublishingInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<BookPublishingInfoEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateBookPublishingInfoSubscription>() => T;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface BookPublishingInfo {
  id: ID_Output;
  image?: String;
  author?: String;
  rating?: String;
}

export interface BookPublishingInfoPromise
  extends Promise<BookPublishingInfo>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  rating: () => Promise<String>;
  availableBooks: <T = FragmentableArray<Book>>(args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BookPublishingInfoSubscription
  extends Promise<AsyncIterator<BookPublishingInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<String>>;
  availableBooks: <T = Promise<AsyncIterator<BookSubscription>>>(args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BookPublishingInfoNullablePromise
  extends Promise<BookPublishingInfo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  rating: () => Promise<String>;
  availableBooks: <T = FragmentableArray<Book>>(args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateOwner {
  count: Int;
}

export interface AggregateOwnerPromise
  extends Promise<AggregateOwner>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOwnerSubscription
  extends Promise<AsyncIterator<AggregateOwner>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OwnerConnection {
  pageInfo: PageInfo;
  edges: OwnerEdge[];
}

export interface OwnerConnectionPromise
  extends Promise<OwnerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OwnerEdge>>() => T;
  aggregate: <T = AggregateOwnerPromise>() => T;
}

export interface OwnerConnectionSubscription
  extends Promise<AsyncIterator<OwnerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OwnerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOwnerSubscription>() => T;
}

export interface AggregateBookPublishingInfo {
  count: Int;
}

export interface AggregateBookPublishingInfoPromise
  extends Promise<AggregateBookPublishingInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookPublishingInfoSubscription
  extends Promise<AsyncIterator<AggregateBookPublishingInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OwnerSubscriptionPayload {
  mutation: MutationType;
  node: Owner;
  updatedFields: String[];
  previousValues: OwnerPreviousValues;
}

export interface OwnerSubscriptionPayloadPromise
  extends Promise<OwnerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OwnerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OwnerPreviousValuesPromise>() => T;
}

export interface OwnerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OwnerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OwnerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OwnerPreviousValuesSubscription>() => T;
}

export interface BookPreviousValues {
  id: ID_Output;
  sourceId: ID_Output;
  ownerId: ID_Output;
  price: String;
  condition: String;
  comment?: String;
  contact: String;
  location?: String;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  price: () => Promise<String>;
  condition: () => Promise<String>;
  comment: () => Promise<String>;
  contact: () => Promise<String>;
  location: () => Promise<String>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sourceId: () => Promise<AsyncIterator<ID_Output>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface Book {
  id: ID_Output;
  sourceId: ID_Output;
  ownerId: ID_Output;
  price: String;
  condition: String;
  comment?: String;
  contact: String;
  location?: String;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  price: () => Promise<String>;
  condition: () => Promise<String>;
  comment: () => Promise<String>;
  contact: () => Promise<String>;
  location: () => Promise<String>;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sourceId: () => Promise<AsyncIterator<ID_Output>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
}

export interface BookNullablePromise
  extends Promise<Book | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  price: () => Promise<String>;
  condition: () => Promise<String>;
  comment: () => Promise<String>;
  contact: () => Promise<String>;
  location: () => Promise<String>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Owner {
  id: ID_Output;
  alias: String;
  avatar?: String;
}

export interface OwnerPromise extends Promise<Owner>, Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  avatar: () => Promise<String>;
  ownedBooks: <T = FragmentableArray<Book>>(args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OwnerSubscription
  extends Promise<AsyncIterator<Owner>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  ownedBooks: <T = Promise<AsyncIterator<BookSubscription>>>(args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OwnerNullablePromise
  extends Promise<Owner | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  avatar: () => Promise<String>;
  ownedBooks: <T = FragmentableArray<Book>>(args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OwnerEdge {
  node: Owner;
  cursor: String;
}

export interface OwnerEdgePromise extends Promise<OwnerEdge>, Fragmentable {
  node: <T = OwnerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OwnerEdgeSubscription
  extends Promise<AsyncIterator<OwnerEdge>>,
    Fragmentable {
  node: <T = OwnerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BookPublishingInfoPreviousValues {
  id: ID_Output;
  image?: String;
  author?: String;
  rating?: String;
}

export interface BookPublishingInfoPreviousValuesPromise
  extends Promise<BookPublishingInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  rating: () => Promise<String>;
}

export interface BookPublishingInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPublishingInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Book",
    embedded: false
  },
  {
    name: "BookPublishingInfo",
    embedded: false
  },
  {
    name: "Owner",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
