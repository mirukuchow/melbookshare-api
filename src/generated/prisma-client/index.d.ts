// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  book: (where?: BookWhereInput) => Promise<boolean>;
  copy: (where?: CopyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  book: (where: BookWhereUniqueInput) => BookNullablePromise;
  books: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Book>;
  booksConnection: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookConnectionPromise;
  copy: (where: CopyWhereUniqueInput) => CopyNullablePromise;
  copies: (args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Copy>;
  copiesConnection: (args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CopyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBook: (data: BookCreateInput) => BookPromise;
  updateBook: (args: {
    data: BookUpdateInput;
    where: BookWhereUniqueInput;
  }) => BookPromise;
  updateManyBooks: (args: {
    data: BookUpdateManyMutationInput;
    where?: BookWhereInput;
  }) => BatchPayloadPromise;
  upsertBook: (args: {
    where: BookWhereUniqueInput;
    create: BookCreateInput;
    update: BookUpdateInput;
  }) => BookPromise;
  deleteBook: (where: BookWhereUniqueInput) => BookPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createCopy: (data: CopyCreateInput) => CopyPromise;
  updateCopy: (args: {
    data: CopyUpdateInput;
    where: CopyWhereUniqueInput;
  }) => CopyPromise;
  updateManyCopies: (args: {
    data: CopyUpdateManyMutationInput;
    where?: CopyWhereInput;
  }) => BatchPayloadPromise;
  upsertCopy: (args: {
    where: CopyWhereUniqueInput;
    create: CopyCreateInput;
    update: CopyUpdateInput;
  }) => CopyPromise;
  deleteCopy: (where: CopyWhereUniqueInput) => CopyPromise;
  deleteManyCopies: (where?: CopyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  copy: (
    where?: CopySubscriptionWhereInput
  ) => CopySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CopyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sourceId_ASC"
  | "sourceId_DESC"
  | "ownerId_ASC"
  | "ownerId_DESC"
  | "price_ASC"
  | "price_DESC"
  | "condition_ASC"
  | "condition_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "contact_ASC"
  | "contact_DESC"
  | "location_ASC"
  | "location_DESC";

export type BookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "sourceId_ASC"
  | "sourceId_DESC"
  | "image_ASC"
  | "image_DESC"
  | "author_ASC"
  | "author_DESC"
  | "rating_ASC"
  | "rating_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "avatar_ASC"
  | "avatar_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutOwnedBooksInput {
  create?: Maybe<UserCreateWithoutOwnedBooksInput>;
  update?: Maybe<UserUpdateWithoutOwnedBooksDataInput>;
  upsert?: Maybe<UserUpsertWithoutOwnedBooksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type BookWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
}>;

export interface CopyUpsertWithWhereUniqueWithoutBookInput {
  where: CopyWhereUniqueInput;
  update: CopyUpdateWithoutBookDataInput;
  create: CopyCreateWithoutBookInput;
}

export interface BookWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  sourceId?: Maybe<ID_Input>;
  sourceId_not?: Maybe<ID_Input>;
  sourceId_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_not_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_lt?: Maybe<ID_Input>;
  sourceId_lte?: Maybe<ID_Input>;
  sourceId_gt?: Maybe<ID_Input>;
  sourceId_gte?: Maybe<ID_Input>;
  sourceId_contains?: Maybe<ID_Input>;
  sourceId_not_contains?: Maybe<ID_Input>;
  sourceId_starts_with?: Maybe<ID_Input>;
  sourceId_not_starts_with?: Maybe<ID_Input>;
  sourceId_ends_with?: Maybe<ID_Input>;
  sourceId_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  availableBooks_every?: Maybe<CopyWhereInput>;
  availableBooks_some?: Maybe<CopyWhereInput>;
  availableBooks_none?: Maybe<CopyWhereInput>;
  AND?: Maybe<BookWhereInput[] | BookWhereInput>;
  OR?: Maybe<BookWhereInput[] | BookWhereInput>;
  NOT?: Maybe<BookWhereInput[] | BookWhereInput>;
}

export interface CopyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
  sourceId_not?: Maybe<ID_Input>;
  sourceId_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_not_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_lt?: Maybe<ID_Input>;
  sourceId_lte?: Maybe<ID_Input>;
  sourceId_gt?: Maybe<ID_Input>;
  sourceId_gte?: Maybe<ID_Input>;
  sourceId_contains?: Maybe<ID_Input>;
  sourceId_not_contains?: Maybe<ID_Input>;
  sourceId_starts_with?: Maybe<ID_Input>;
  sourceId_not_starts_with?: Maybe<ID_Input>;
  sourceId_ends_with?: Maybe<ID_Input>;
  sourceId_not_ends_with?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  ownerId_not?: Maybe<ID_Input>;
  ownerId_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_not_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_lt?: Maybe<ID_Input>;
  ownerId_lte?: Maybe<ID_Input>;
  ownerId_gt?: Maybe<ID_Input>;
  ownerId_gte?: Maybe<ID_Input>;
  ownerId_contains?: Maybe<ID_Input>;
  ownerId_not_contains?: Maybe<ID_Input>;
  ownerId_starts_with?: Maybe<ID_Input>;
  ownerId_not_starts_with?: Maybe<ID_Input>;
  ownerId_ends_with?: Maybe<ID_Input>;
  ownerId_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  condition?: Maybe<String>;
  condition_not?: Maybe<String>;
  condition_in?: Maybe<String[] | String>;
  condition_not_in?: Maybe<String[] | String>;
  condition_lt?: Maybe<String>;
  condition_lte?: Maybe<String>;
  condition_gt?: Maybe<String>;
  condition_gte?: Maybe<String>;
  condition_contains?: Maybe<String>;
  condition_not_contains?: Maybe<String>;
  condition_starts_with?: Maybe<String>;
  condition_not_starts_with?: Maybe<String>;
  condition_ends_with?: Maybe<String>;
  condition_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  AND?: Maybe<CopyScalarWhereInput[] | CopyScalarWhereInput>;
  OR?: Maybe<CopyScalarWhereInput[] | CopyScalarWhereInput>;
  NOT?: Maybe<CopyScalarWhereInput[] | CopyScalarWhereInput>;
}

export interface CopyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
  sourceId_not?: Maybe<ID_Input>;
  sourceId_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_not_in?: Maybe<ID_Input[] | ID_Input>;
  sourceId_lt?: Maybe<ID_Input>;
  sourceId_lte?: Maybe<ID_Input>;
  sourceId_gt?: Maybe<ID_Input>;
  sourceId_gte?: Maybe<ID_Input>;
  sourceId_contains?: Maybe<ID_Input>;
  sourceId_not_contains?: Maybe<ID_Input>;
  sourceId_starts_with?: Maybe<ID_Input>;
  sourceId_not_starts_with?: Maybe<ID_Input>;
  sourceId_ends_with?: Maybe<ID_Input>;
  sourceId_not_ends_with?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  ownerId_not?: Maybe<ID_Input>;
  ownerId_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_not_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_lt?: Maybe<ID_Input>;
  ownerId_lte?: Maybe<ID_Input>;
  ownerId_gt?: Maybe<ID_Input>;
  ownerId_gte?: Maybe<ID_Input>;
  ownerId_contains?: Maybe<ID_Input>;
  ownerId_not_contains?: Maybe<ID_Input>;
  ownerId_starts_with?: Maybe<ID_Input>;
  ownerId_not_starts_with?: Maybe<ID_Input>;
  ownerId_ends_with?: Maybe<ID_Input>;
  ownerId_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  condition?: Maybe<String>;
  condition_not?: Maybe<String>;
  condition_in?: Maybe<String[] | String>;
  condition_not_in?: Maybe<String[] | String>;
  condition_lt?: Maybe<String>;
  condition_lte?: Maybe<String>;
  condition_gt?: Maybe<String>;
  condition_gte?: Maybe<String>;
  condition_contains?: Maybe<String>;
  condition_not_contains?: Maybe<String>;
  condition_starts_with?: Maybe<String>;
  condition_not_starts_with?: Maybe<String>;
  condition_ends_with?: Maybe<String>;
  condition_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  contact?: Maybe<String>;
  contact_not?: Maybe<String>;
  contact_in?: Maybe<String[] | String>;
  contact_not_in?: Maybe<String[] | String>;
  contact_lt?: Maybe<String>;
  contact_lte?: Maybe<String>;
  contact_gt?: Maybe<String>;
  contact_gte?: Maybe<String>;
  contact_contains?: Maybe<String>;
  contact_not_contains?: Maybe<String>;
  contact_starts_with?: Maybe<String>;
  contact_not_starts_with?: Maybe<String>;
  contact_ends_with?: Maybe<String>;
  contact_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  book?: Maybe<BookWhereInput>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<CopyWhereInput[] | CopyWhereInput>;
  OR?: Maybe<CopyWhereInput[] | CopyWhereInput>;
  NOT?: Maybe<CopyWhereInput[] | CopyWhereInput>;
}

export interface CopyCreateWithoutBookInput {
  id?: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price: String;
  condition: String;
  comment?: Maybe<String>;
  contact: String;
  location?: Maybe<String>;
  owner?: Maybe<UserCreateOneWithoutOwnedBooksInput>;
}

export interface BookCreateOneWithoutAvailableBooksInput {
  create?: Maybe<BookCreateWithoutAvailableBooksInput>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export interface UserCreateOneWithoutOwnedBooksInput {
  create?: Maybe<UserCreateWithoutOwnedBooksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CopyUpdateManyWithWhereNestedInput {
  where: CopyScalarWhereInput;
  data: CopyUpdateManyDataInput;
}

export interface UserCreateWithoutOwnedBooksInput {
  id?: Maybe<ID_Input>;
  userId: ID_Input;
  alias: String;
  avatar?: Maybe<String>;
}

export interface CopySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CopyWhereInput>;
  AND?: Maybe<CopySubscriptionWhereInput[] | CopySubscriptionWhereInput>;
  OR?: Maybe<CopySubscriptionWhereInput[] | CopySubscriptionWhereInput>;
  NOT?: Maybe<CopySubscriptionWhereInput[] | CopySubscriptionWhereInput>;
}

export interface BookUpdateInput {
  title?: Maybe<String>;
  sourceId?: Maybe<ID_Input>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<Float>;
  availableBooks?: Maybe<CopyUpdateManyWithoutBookInput>;
}

export interface UserUpdateManyMutationInput {
  userId?: Maybe<ID_Input>;
  alias?: Maybe<String>;
  avatar?: Maybe<String>;
}

export interface CopyUpdateManyWithoutBookInput {
  create?: Maybe<CopyCreateWithoutBookInput[] | CopyCreateWithoutBookInput>;
  delete?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  connect?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  set?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  disconnect?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  update?: Maybe<
    | CopyUpdateWithWhereUniqueWithoutBookInput[]
    | CopyUpdateWithWhereUniqueWithoutBookInput
  >;
  upsert?: Maybe<
    | CopyUpsertWithWhereUniqueWithoutBookInput[]
    | CopyUpsertWithWhereUniqueWithoutBookInput
  >;
  deleteMany?: Maybe<CopyScalarWhereInput[] | CopyScalarWhereInput>;
  updateMany?: Maybe<
    CopyUpdateManyWithWhereNestedInput[] | CopyUpdateManyWithWhereNestedInput
  >;
}

export interface CopyUpdateWithoutOwnerDataInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
  book?: Maybe<BookUpdateOneWithoutAvailableBooksInput>;
}

export interface CopyUpdateWithWhereUniqueWithoutBookInput {
  where: CopyWhereUniqueInput;
  data: CopyUpdateWithoutBookDataInput;
}

export interface CopyUpdateWithWhereUniqueWithoutOwnerInput {
  where: CopyWhereUniqueInput;
  data: CopyUpdateWithoutOwnerDataInput;
}

export interface CopyUpdateWithoutBookDataInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
  owner?: Maybe<UserUpdateOneWithoutOwnedBooksInput>;
}

export interface UserUpdateInput {
  userId?: Maybe<ID_Input>;
  alias?: Maybe<String>;
  avatar?: Maybe<String>;
  ownedBooks?: Maybe<CopyUpdateManyWithoutOwnerInput>;
}

export interface BookUpsertWithoutAvailableBooksInput {
  update: BookUpdateWithoutAvailableBooksDataInput;
  create: BookCreateWithoutAvailableBooksInput;
}

export interface CopyCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price: String;
  condition: String;
  comment?: Maybe<String>;
  contact: String;
  location?: Maybe<String>;
  book?: Maybe<BookCreateOneWithoutAvailableBooksInput>;
}

export interface UserUpdateWithoutOwnedBooksDataInput {
  userId?: Maybe<ID_Input>;
  alias?: Maybe<String>;
  avatar?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  userId: ID_Input;
  alias: String;
  avatar?: Maybe<String>;
  ownedBooks?: Maybe<CopyCreateManyWithoutOwnerInput>;
}

export interface UserUpsertWithoutOwnedBooksInput {
  update: UserUpdateWithoutOwnedBooksDataInput;
  create: UserCreateWithoutOwnedBooksInput;
}

export interface CopyCreateManyWithoutBookInput {
  create?: Maybe<CopyCreateWithoutBookInput[] | CopyCreateWithoutBookInput>;
  connect?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  alias?: Maybe<String>;
  alias_not?: Maybe<String>;
  alias_in?: Maybe<String[] | String>;
  alias_not_in?: Maybe<String[] | String>;
  alias_lt?: Maybe<String>;
  alias_lte?: Maybe<String>;
  alias_gt?: Maybe<String>;
  alias_gte?: Maybe<String>;
  alias_contains?: Maybe<String>;
  alias_not_contains?: Maybe<String>;
  alias_starts_with?: Maybe<String>;
  alias_not_starts_with?: Maybe<String>;
  alias_ends_with?: Maybe<String>;
  alias_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  ownedBooks_every?: Maybe<CopyWhereInput>;
  ownedBooks_some?: Maybe<CopyWhereInput>;
  ownedBooks_none?: Maybe<CopyWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BookSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookWhereInput>;
  AND?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  OR?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  NOT?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
}

export interface BookUpdateWithoutAvailableBooksDataInput {
  title?: Maybe<String>;
  sourceId?: Maybe<ID_Input>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<Float>;
}

export type CopyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookUpdateOneWithoutAvailableBooksInput {
  create?: Maybe<BookCreateWithoutAvailableBooksInput>;
  update?: Maybe<BookUpdateWithoutAvailableBooksDataInput>;
  upsert?: Maybe<BookUpsertWithoutAvailableBooksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
}>;

export interface CopyUpdateManyDataInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
}

export interface CopyUpdateManyMutationInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
}

export interface CopyCreateInput {
  id?: Maybe<ID_Input>;
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price: String;
  condition: String;
  comment?: Maybe<String>;
  contact: String;
  location?: Maybe<String>;
  book?: Maybe<BookCreateOneWithoutAvailableBooksInput>;
  owner?: Maybe<UserCreateOneWithoutOwnedBooksInput>;
}

export interface BookCreateWithoutAvailableBooksInput {
  id?: Maybe<ID_Input>;
  title: String;
  sourceId: ID_Input;
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<Float>;
}

export interface CopyUpdateInput {
  sourceId?: Maybe<ID_Input>;
  ownerId?: Maybe<ID_Input>;
  price?: Maybe<String>;
  condition?: Maybe<String>;
  comment?: Maybe<String>;
  contact?: Maybe<String>;
  location?: Maybe<String>;
  book?: Maybe<BookUpdateOneWithoutAvailableBooksInput>;
  owner?: Maybe<UserUpdateOneWithoutOwnedBooksInput>;
}

export interface BookUpdateManyMutationInput {
  title?: Maybe<String>;
  sourceId?: Maybe<ID_Input>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<Float>;
}

export interface BookCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  sourceId: ID_Input;
  image?: Maybe<String>;
  author?: Maybe<String>;
  rating?: Maybe<Float>;
  availableBooks?: Maybe<CopyCreateManyWithoutBookInput>;
}

export interface CopyCreateManyWithoutOwnerInput {
  create?: Maybe<CopyCreateWithoutOwnerInput[] | CopyCreateWithoutOwnerInput>;
  connect?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
}

export interface CopyUpdateManyWithoutOwnerInput {
  create?: Maybe<CopyCreateWithoutOwnerInput[] | CopyCreateWithoutOwnerInput>;
  delete?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  connect?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  set?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  disconnect?: Maybe<CopyWhereUniqueInput[] | CopyWhereUniqueInput>;
  update?: Maybe<
    | CopyUpdateWithWhereUniqueWithoutOwnerInput[]
    | CopyUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | CopyUpsertWithWhereUniqueWithoutOwnerInput[]
    | CopyUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<CopyScalarWhereInput[] | CopyScalarWhereInput>;
  updateMany?: Maybe<
    CopyUpdateManyWithWhereNestedInput[] | CopyUpdateManyWithWhereNestedInput
  >;
}

export interface CopyUpsertWithWhereUniqueWithoutOwnerInput {
  where: CopyWhereUniqueInput;
  update: CopyUpdateWithoutOwnerDataInput;
  create: CopyCreateWithoutOwnerInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  userId: ID_Output;
  alias: String;
  avatar?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Copy {
  id: ID_Output;
  sourceId?: ID_Output;
  ownerId?: ID_Output;
  price: String;
  condition: String;
  comment?: String;
  contact: String;
  location?: String;
}

export interface CopyPromise extends Promise<Copy>, Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  price: () => Promise<String>;
  condition: () => Promise<String>;
  comment: () => Promise<String>;
  contact: () => Promise<String>;
  location: () => Promise<String>;
  book: <T = BookPromise>() => T;
  owner: <T = UserPromise>() => T;
}

export interface CopySubscription
  extends Promise<AsyncIterator<Copy>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sourceId: () => Promise<AsyncIterator<ID_Output>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  book: <T = BookSubscription>() => T;
  owner: <T = UserSubscription>() => T;
}

export interface CopyNullablePromise
  extends Promise<Copy | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  price: () => Promise<String>;
  condition: () => Promise<String>;
  comment: () => Promise<String>;
  contact: () => Promise<String>;
  location: () => Promise<String>;
  book: <T = BookPromise>() => T;
  owner: <T = UserPromise>() => T;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  userId: ID_Output;
  alias: String;
  avatar?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  avatar: () => Promise<String>;
  ownedBooks: <T = FragmentableArray<Copy>>(args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  ownedBooks: <T = Promise<AsyncIterator<CopySubscription>>>(args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  avatar: () => Promise<String>;
  ownedBooks: <T = FragmentableArray<Copy>>(args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CopyPreviousValues {
  id: ID_Output;
  sourceId?: ID_Output;
  ownerId?: ID_Output;
  price: String;
  condition: String;
  comment?: String;
  contact: String;
  location?: String;
}

export interface CopyPreviousValuesPromise
  extends Promise<CopyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<ID_Output>;
  ownerId: () => Promise<ID_Output>;
  price: () => Promise<String>;
  condition: () => Promise<String>;
  comment: () => Promise<String>;
  contact: () => Promise<String>;
  location: () => Promise<String>;
}

export interface CopyPreviousValuesSubscription
  extends Promise<AsyncIterator<CopyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sourceId: () => Promise<AsyncIterator<ID_Output>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  contact: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
}

export interface CopySubscriptionPayload {
  mutation: MutationType;
  node: Copy;
  updatedFields: String[];
  previousValues: CopyPreviousValues;
}

export interface CopySubscriptionPayloadPromise
  extends Promise<CopySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CopyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CopyPreviousValuesPromise>() => T;
}

export interface CopySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CopySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CopySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CopyPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCopy {
  count: Int;
}

export interface AggregateCopyPromise
  extends Promise<AggregateCopy>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCopySubscription
  extends Promise<AsyncIterator<AggregateCopy>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface BookPreviousValues {
  id: ID_Output;
  title: String;
  sourceId: ID_Output;
  image?: String;
  author?: String;
  rating?: Float;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  sourceId: () => Promise<ID_Output>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  rating: () => Promise<Float>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  sourceId: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Float>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface Book {
  id: ID_Output;
  title: String;
  sourceId: ID_Output;
  image?: String;
  author?: String;
  rating?: Float;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  sourceId: () => Promise<ID_Output>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  rating: () => Promise<Float>;
  availableBooks: <T = FragmentableArray<Copy>>(args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  sourceId: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Float>>;
  availableBooks: <T = Promise<AsyncIterator<CopySubscription>>>(args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BookNullablePromise
  extends Promise<Book | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  sourceId: () => Promise<ID_Output>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  rating: () => Promise<Float>;
  availableBooks: <T = FragmentableArray<Copy>>(args?: {
    where?: CopyWhereInput;
    orderBy?: CopyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CopyEdge {
  node: Copy;
  cursor: String;
}

export interface CopyEdgePromise extends Promise<CopyEdge>, Fragmentable {
  node: <T = CopyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CopyEdgeSubscription
  extends Promise<AsyncIterator<CopyEdge>>,
    Fragmentable {
  node: <T = CopySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CopyConnection {
  pageInfo: PageInfo;
  edges: CopyEdge[];
}

export interface CopyConnectionPromise
  extends Promise<CopyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CopyEdge>>() => T;
  aggregate: <T = AggregateCopyPromise>() => T;
}

export interface CopyConnectionSubscription
  extends Promise<AsyncIterator<CopyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CopyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCopySubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Copy",
    embedded: false
  },
  {
    name: "Book",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
