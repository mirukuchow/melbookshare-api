module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBook {
  count: Int!
}

type AggregateCopy {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  sourceId: ID!
  image: String
  author: String
  rating: Float
  availableBooks(where: CopyWhereInput, orderBy: CopyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Copy!]
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  sourceId: ID!
  image: String
  author: String
  rating: Float
  availableBooks: CopyCreateManyWithoutBookInput
}

input BookCreateOneWithoutAvailableBooksInput {
  create: BookCreateWithoutAvailableBooksInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutAvailableBooksInput {
  id: ID
  sourceId: ID!
  image: String
  author: String
  rating: Float
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  sourceId_ASC
  sourceId_DESC
  image_ASC
  image_DESC
  author_ASC
  author_DESC
  rating_ASC
  rating_DESC
}

type BookPreviousValues {
  id: ID!
  sourceId: ID!
  image: String
  author: String
  rating: Float
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateInput {
  sourceId: ID
  image: String
  author: String
  rating: Float
  availableBooks: CopyUpdateManyWithoutBookInput
}

input BookUpdateManyMutationInput {
  sourceId: ID
  image: String
  author: String
  rating: Float
}

input BookUpdateOneWithoutAvailableBooksInput {
  create: BookCreateWithoutAvailableBooksInput
  update: BookUpdateWithoutAvailableBooksDataInput
  upsert: BookUpsertWithoutAvailableBooksInput
  delete: Boolean
  disconnect: Boolean
  connect: BookWhereUniqueInput
}

input BookUpdateWithoutAvailableBooksDataInput {
  sourceId: ID
  image: String
  author: String
  rating: Float
}

input BookUpsertWithoutAvailableBooksInput {
  update: BookUpdateWithoutAvailableBooksDataInput!
  create: BookCreateWithoutAvailableBooksInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sourceId: ID
  sourceId_not: ID
  sourceId_in: [ID!]
  sourceId_not_in: [ID!]
  sourceId_lt: ID
  sourceId_lte: ID
  sourceId_gt: ID
  sourceId_gte: ID
  sourceId_contains: ID
  sourceId_not_contains: ID
  sourceId_starts_with: ID
  sourceId_not_starts_with: ID
  sourceId_ends_with: ID
  sourceId_not_ends_with: ID
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  availableBooks_every: CopyWhereInput
  availableBooks_some: CopyWhereInput
  availableBooks_none: CopyWhereInput
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
}

type Copy {
  id: ID!
  sourceId: ID
  ownerId: ID
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
  book: Book
  owner: User
}

type CopyConnection {
  pageInfo: PageInfo!
  edges: [CopyEdge]!
  aggregate: AggregateCopy!
}

input CopyCreateInput {
  id: ID
  sourceId: ID
  ownerId: ID
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
  book: BookCreateOneWithoutAvailableBooksInput
  owner: UserCreateOneWithoutOwnedBooksInput
}

input CopyCreateManyWithoutBookInput {
  create: [CopyCreateWithoutBookInput!]
  connect: [CopyWhereUniqueInput!]
}

input CopyCreateManyWithoutOwnerInput {
  create: [CopyCreateWithoutOwnerInput!]
  connect: [CopyWhereUniqueInput!]
}

input CopyCreateWithoutBookInput {
  id: ID
  sourceId: ID
  ownerId: ID
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
  owner: UserCreateOneWithoutOwnedBooksInput
}

input CopyCreateWithoutOwnerInput {
  id: ID
  sourceId: ID
  ownerId: ID
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
  book: BookCreateOneWithoutAvailableBooksInput
}

type CopyEdge {
  node: Copy!
  cursor: String!
}

enum CopyOrderByInput {
  id_ASC
  id_DESC
  sourceId_ASC
  sourceId_DESC
  ownerId_ASC
  ownerId_DESC
  price_ASC
  price_DESC
  condition_ASC
  condition_DESC
  comment_ASC
  comment_DESC
  contact_ASC
  contact_DESC
  location_ASC
  location_DESC
}

type CopyPreviousValues {
  id: ID!
  sourceId: ID
  ownerId: ID
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
}

input CopyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sourceId: ID
  sourceId_not: ID
  sourceId_in: [ID!]
  sourceId_not_in: [ID!]
  sourceId_lt: ID
  sourceId_lte: ID
  sourceId_gt: ID
  sourceId_gte: ID
  sourceId_contains: ID
  sourceId_not_contains: ID
  sourceId_starts_with: ID
  sourceId_not_starts_with: ID
  sourceId_ends_with: ID
  sourceId_not_ends_with: ID
  ownerId: ID
  ownerId_not: ID
  ownerId_in: [ID!]
  ownerId_not_in: [ID!]
  ownerId_lt: ID
  ownerId_lte: ID
  ownerId_gt: ID
  ownerId_gte: ID
  ownerId_contains: ID
  ownerId_not_contains: ID
  ownerId_starts_with: ID
  ownerId_not_starts_with: ID
  ownerId_ends_with: ID
  ownerId_not_ends_with: ID
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  condition: String
  condition_not: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_lt: String
  condition_lte: String
  condition_gt: String
  condition_gte: String
  condition_contains: String
  condition_not_contains: String
  condition_starts_with: String
  condition_not_starts_with: String
  condition_ends_with: String
  condition_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [CopyScalarWhereInput!]
  OR: [CopyScalarWhereInput!]
  NOT: [CopyScalarWhereInput!]
}

type CopySubscriptionPayload {
  mutation: MutationType!
  node: Copy
  updatedFields: [String!]
  previousValues: CopyPreviousValues
}

input CopySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CopyWhereInput
  AND: [CopySubscriptionWhereInput!]
  OR: [CopySubscriptionWhereInput!]
  NOT: [CopySubscriptionWhereInput!]
}

input CopyUpdateInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
  book: BookUpdateOneWithoutAvailableBooksInput
  owner: UserUpdateOneWithoutOwnedBooksInput
}

input CopyUpdateManyDataInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
}

input CopyUpdateManyMutationInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
}

input CopyUpdateManyWithoutBookInput {
  create: [CopyCreateWithoutBookInput!]
  delete: [CopyWhereUniqueInput!]
  connect: [CopyWhereUniqueInput!]
  set: [CopyWhereUniqueInput!]
  disconnect: [CopyWhereUniqueInput!]
  update: [CopyUpdateWithWhereUniqueWithoutBookInput!]
  upsert: [CopyUpsertWithWhereUniqueWithoutBookInput!]
  deleteMany: [CopyScalarWhereInput!]
  updateMany: [CopyUpdateManyWithWhereNestedInput!]
}

input CopyUpdateManyWithoutOwnerInput {
  create: [CopyCreateWithoutOwnerInput!]
  delete: [CopyWhereUniqueInput!]
  connect: [CopyWhereUniqueInput!]
  set: [CopyWhereUniqueInput!]
  disconnect: [CopyWhereUniqueInput!]
  update: [CopyUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [CopyUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [CopyScalarWhereInput!]
  updateMany: [CopyUpdateManyWithWhereNestedInput!]
}

input CopyUpdateManyWithWhereNestedInput {
  where: CopyScalarWhereInput!
  data: CopyUpdateManyDataInput!
}

input CopyUpdateWithoutBookDataInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
  owner: UserUpdateOneWithoutOwnedBooksInput
}

input CopyUpdateWithoutOwnerDataInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
  book: BookUpdateOneWithoutAvailableBooksInput
}

input CopyUpdateWithWhereUniqueWithoutBookInput {
  where: CopyWhereUniqueInput!
  data: CopyUpdateWithoutBookDataInput!
}

input CopyUpdateWithWhereUniqueWithoutOwnerInput {
  where: CopyWhereUniqueInput!
  data: CopyUpdateWithoutOwnerDataInput!
}

input CopyUpsertWithWhereUniqueWithoutBookInput {
  where: CopyWhereUniqueInput!
  update: CopyUpdateWithoutBookDataInput!
  create: CopyCreateWithoutBookInput!
}

input CopyUpsertWithWhereUniqueWithoutOwnerInput {
  where: CopyWhereUniqueInput!
  update: CopyUpdateWithoutOwnerDataInput!
  create: CopyCreateWithoutOwnerInput!
}

input CopyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sourceId: ID
  sourceId_not: ID
  sourceId_in: [ID!]
  sourceId_not_in: [ID!]
  sourceId_lt: ID
  sourceId_lte: ID
  sourceId_gt: ID
  sourceId_gte: ID
  sourceId_contains: ID
  sourceId_not_contains: ID
  sourceId_starts_with: ID
  sourceId_not_starts_with: ID
  sourceId_ends_with: ID
  sourceId_not_ends_with: ID
  ownerId: ID
  ownerId_not: ID
  ownerId_in: [ID!]
  ownerId_not_in: [ID!]
  ownerId_lt: ID
  ownerId_lte: ID
  ownerId_gt: ID
  ownerId_gte: ID
  ownerId_contains: ID
  ownerId_not_contains: ID
  ownerId_starts_with: ID
  ownerId_not_starts_with: ID
  ownerId_ends_with: ID
  ownerId_not_ends_with: ID
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  condition: String
  condition_not: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_lt: String
  condition_lte: String
  condition_gt: String
  condition_gte: String
  condition_contains: String
  condition_not_contains: String
  condition_starts_with: String
  condition_not_starts_with: String
  condition_ends_with: String
  condition_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  book: BookWhereInput
  owner: UserWhereInput
  AND: [CopyWhereInput!]
  OR: [CopyWhereInput!]
  NOT: [CopyWhereInput!]
}

input CopyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createCopy(data: CopyCreateInput!): Copy!
  updateCopy(data: CopyUpdateInput!, where: CopyWhereUniqueInput!): Copy
  updateManyCopies(data: CopyUpdateManyMutationInput!, where: CopyWhereInput): BatchPayload!
  upsertCopy(where: CopyWhereUniqueInput!, create: CopyCreateInput!, update: CopyUpdateInput!): Copy!
  deleteCopy(where: CopyWhereUniqueInput!): Copy
  deleteManyCopies(where: CopyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  copy(where: CopyWhereUniqueInput!): Copy
  copies(where: CopyWhereInput, orderBy: CopyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Copy]!
  copiesConnection(where: CopyWhereInput, orderBy: CopyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CopyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  copy(where: CopySubscriptionWhereInput): CopySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  userId: ID!
  alias: String!
  avatar: String
  ownedBooks(where: CopyWhereInput, orderBy: CopyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Copy!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  userId: ID!
  alias: String!
  avatar: String
  ownedBooks: CopyCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutOwnedBooksInput {
  create: UserCreateWithoutOwnedBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOwnedBooksInput {
  id: ID
  userId: ID!
  alias: String!
  avatar: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  alias_ASC
  alias_DESC
  avatar_ASC
  avatar_DESC
}

type UserPreviousValues {
  id: ID!
  userId: ID!
  alias: String!
  avatar: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  userId: ID
  alias: String
  avatar: String
  ownedBooks: CopyUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  userId: ID
  alias: String
  avatar: String
}

input UserUpdateOneWithoutOwnedBooksInput {
  create: UserCreateWithoutOwnedBooksInput
  update: UserUpdateWithoutOwnedBooksDataInput
  upsert: UserUpsertWithoutOwnedBooksInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutOwnedBooksDataInput {
  userId: ID
  alias: String
  avatar: String
}

input UserUpsertWithoutOwnedBooksInput {
  update: UserUpdateWithoutOwnedBooksDataInput!
  create: UserCreateWithoutOwnedBooksInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  ownedBooks_every: CopyWhereInput
  ownedBooks_some: CopyWhereInput
  ownedBooks_none: CopyWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    