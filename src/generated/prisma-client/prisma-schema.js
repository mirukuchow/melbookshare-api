module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBook {
  count: Int!
}

type AggregateBookPublishingInfo {
  count: Int!
}

type AggregateOwner {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  sourceId: ID!
  ownerId: ID!
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  sourceId: ID!
  ownerId: ID!
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
}

input BookCreateManyInput {
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  sourceId_ASC
  sourceId_DESC
  ownerId_ASC
  ownerId_DESC
  price_ASC
  price_DESC
  condition_ASC
  condition_DESC
  comment_ASC
  comment_DESC
  contact_ASC
  contact_DESC
  location_ASC
  location_DESC
}

type BookPreviousValues {
  id: ID!
  sourceId: ID!
  ownerId: ID!
  price: String!
  condition: String!
  comment: String
  contact: String!
  location: String
}

type BookPublishingInfo {
  id: ID!
  image: String
  author: String
  rating: String
  availableBooks(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

type BookPublishingInfoConnection {
  pageInfo: PageInfo!
  edges: [BookPublishingInfoEdge]!
  aggregate: AggregateBookPublishingInfo!
}

input BookPublishingInfoCreateInput {
  id: ID
  image: String
  author: String
  rating: String
  availableBooks: BookCreateManyInput
}

type BookPublishingInfoEdge {
  node: BookPublishingInfo!
  cursor: String!
}

enum BookPublishingInfoOrderByInput {
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  author_ASC
  author_DESC
  rating_ASC
  rating_DESC
}

type BookPublishingInfoPreviousValues {
  id: ID!
  image: String
  author: String
  rating: String
}

type BookPublishingInfoSubscriptionPayload {
  mutation: MutationType!
  node: BookPublishingInfo
  updatedFields: [String!]
  previousValues: BookPublishingInfoPreviousValues
}

input BookPublishingInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookPublishingInfoWhereInput
  AND: [BookPublishingInfoSubscriptionWhereInput!]
  OR: [BookPublishingInfoSubscriptionWhereInput!]
  NOT: [BookPublishingInfoSubscriptionWhereInput!]
}

input BookPublishingInfoUpdateInput {
  image: String
  author: String
  rating: String
  availableBooks: BookUpdateManyInput
}

input BookPublishingInfoUpdateManyMutationInput {
  image: String
  author: String
  rating: String
}

input BookPublishingInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  rating: String
  rating_not: String
  rating_in: [String!]
  rating_not_in: [String!]
  rating_lt: String
  rating_lte: String
  rating_gt: String
  rating_gte: String
  rating_contains: String
  rating_not_contains: String
  rating_starts_with: String
  rating_not_starts_with: String
  rating_ends_with: String
  rating_not_ends_with: String
  availableBooks_every: BookWhereInput
  availableBooks_some: BookWhereInput
  availableBooks_none: BookWhereInput
  AND: [BookPublishingInfoWhereInput!]
  OR: [BookPublishingInfoWhereInput!]
  NOT: [BookPublishingInfoWhereInput!]
}

input BookPublishingInfoWhereUniqueInput {
  id: ID
}

input BookScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sourceId: ID
  sourceId_not: ID
  sourceId_in: [ID!]
  sourceId_not_in: [ID!]
  sourceId_lt: ID
  sourceId_lte: ID
  sourceId_gt: ID
  sourceId_gte: ID
  sourceId_contains: ID
  sourceId_not_contains: ID
  sourceId_starts_with: ID
  sourceId_not_starts_with: ID
  sourceId_ends_with: ID
  sourceId_not_ends_with: ID
  ownerId: ID
  ownerId_not: ID
  ownerId_in: [ID!]
  ownerId_not_in: [ID!]
  ownerId_lt: ID
  ownerId_lte: ID
  ownerId_gt: ID
  ownerId_gte: ID
  ownerId_contains: ID
  ownerId_not_contains: ID
  ownerId_starts_with: ID
  ownerId_not_starts_with: ID
  ownerId_ends_with: ID
  ownerId_not_ends_with: ID
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  condition: String
  condition_not: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_lt: String
  condition_lte: String
  condition_gt: String
  condition_gte: String
  condition_contains: String
  condition_not_contains: String
  condition_starts_with: String
  condition_not_starts_with: String
  condition_ends_with: String
  condition_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [BookScalarWhereInput!]
  OR: [BookScalarWhereInput!]
  NOT: [BookScalarWhereInput!]
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateDataInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
}

input BookUpdateInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
}

input BookUpdateManyDataInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
}

input BookUpdateManyInput {
  create: [BookCreateInput!]
  update: [BookUpdateWithWhereUniqueNestedInput!]
  upsert: [BookUpsertWithWhereUniqueNestedInput!]
  delete: [BookWhereUniqueInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
}

input BookUpdateManyMutationInput {
  sourceId: ID
  ownerId: ID
  price: String
  condition: String
  comment: String
  contact: String
  location: String
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput!
  data: BookUpdateDataInput!
}

input BookUpsertWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput!
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sourceId: ID
  sourceId_not: ID
  sourceId_in: [ID!]
  sourceId_not_in: [ID!]
  sourceId_lt: ID
  sourceId_lte: ID
  sourceId_gt: ID
  sourceId_gte: ID
  sourceId_contains: ID
  sourceId_not_contains: ID
  sourceId_starts_with: ID
  sourceId_not_starts_with: ID
  sourceId_ends_with: ID
  sourceId_not_ends_with: ID
  ownerId: ID
  ownerId_not: ID
  ownerId_in: [ID!]
  ownerId_not_in: [ID!]
  ownerId_lt: ID
  ownerId_lte: ID
  ownerId_gt: ID
  ownerId_gte: ID
  ownerId_contains: ID
  ownerId_not_contains: ID
  ownerId_starts_with: ID
  ownerId_not_starts_with: ID
  ownerId_ends_with: ID
  ownerId_not_ends_with: ID
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  condition: String
  condition_not: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_lt: String
  condition_lte: String
  condition_gt: String
  condition_gte: String
  condition_contains: String
  condition_not_contains: String
  condition_starts_with: String
  condition_not_starts_with: String
  condition_ends_with: String
  condition_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  contact: String
  contact_not: String
  contact_in: [String!]
  contact_not_in: [String!]
  contact_lt: String
  contact_lte: String
  contact_gt: String
  contact_gte: String
  contact_contains: String
  contact_not_contains: String
  contact_starts_with: String
  contact_not_starts_with: String
  contact_ends_with: String
  contact_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createBookPublishingInfo(data: BookPublishingInfoCreateInput!): BookPublishingInfo!
  updateBookPublishingInfo(data: BookPublishingInfoUpdateInput!, where: BookPublishingInfoWhereUniqueInput!): BookPublishingInfo
  updateManyBookPublishingInfoes(data: BookPublishingInfoUpdateManyMutationInput!, where: BookPublishingInfoWhereInput): BatchPayload!
  upsertBookPublishingInfo(where: BookPublishingInfoWhereUniqueInput!, create: BookPublishingInfoCreateInput!, update: BookPublishingInfoUpdateInput!): BookPublishingInfo!
  deleteBookPublishingInfo(where: BookPublishingInfoWhereUniqueInput!): BookPublishingInfo
  deleteManyBookPublishingInfoes(where: BookPublishingInfoWhereInput): BatchPayload!
  createOwner(data: OwnerCreateInput!): Owner!
  updateOwner(data: OwnerUpdateInput!, where: OwnerWhereUniqueInput!): Owner
  updateManyOwners(data: OwnerUpdateManyMutationInput!, where: OwnerWhereInput): BatchPayload!
  upsertOwner(where: OwnerWhereUniqueInput!, create: OwnerCreateInput!, update: OwnerUpdateInput!): Owner!
  deleteOwner(where: OwnerWhereUniqueInput!): Owner
  deleteManyOwners(where: OwnerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Owner {
  id: ID!
  alias: String!
  avatar: String
  ownedBooks(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

type OwnerConnection {
  pageInfo: PageInfo!
  edges: [OwnerEdge]!
  aggregate: AggregateOwner!
}

input OwnerCreateInput {
  id: ID
  alias: String!
  avatar: String
  ownedBooks: BookCreateManyInput
}

type OwnerEdge {
  node: Owner!
  cursor: String!
}

enum OwnerOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  avatar_ASC
  avatar_DESC
}

type OwnerPreviousValues {
  id: ID!
  alias: String!
  avatar: String
}

type OwnerSubscriptionPayload {
  mutation: MutationType!
  node: Owner
  updatedFields: [String!]
  previousValues: OwnerPreviousValues
}

input OwnerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OwnerWhereInput
  AND: [OwnerSubscriptionWhereInput!]
  OR: [OwnerSubscriptionWhereInput!]
  NOT: [OwnerSubscriptionWhereInput!]
}

input OwnerUpdateInput {
  alias: String
  avatar: String
  ownedBooks: BookUpdateManyInput
}

input OwnerUpdateManyMutationInput {
  alias: String
  avatar: String
}

input OwnerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  ownedBooks_every: BookWhereInput
  ownedBooks_some: BookWhereInput
  ownedBooks_none: BookWhereInput
  AND: [OwnerWhereInput!]
  OR: [OwnerWhereInput!]
  NOT: [OwnerWhereInput!]
}

input OwnerWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  bookPublishingInfo(where: BookPublishingInfoWhereUniqueInput!): BookPublishingInfo
  bookPublishingInfoes(where: BookPublishingInfoWhereInput, orderBy: BookPublishingInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookPublishingInfo]!
  bookPublishingInfoesConnection(where: BookPublishingInfoWhereInput, orderBy: BookPublishingInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookPublishingInfoConnection!
  owner(where: OwnerWhereUniqueInput!): Owner
  owners(where: OwnerWhereInput, orderBy: OwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Owner]!
  ownersConnection(where: OwnerWhereInput, orderBy: OwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OwnerConnection!
  node(id: ID!): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  bookPublishingInfo(where: BookPublishingInfoSubscriptionWhereInput): BookPublishingInfoSubscriptionPayload
  owner(where: OwnerSubscriptionWhereInput): OwnerSubscriptionPayload
}
`
      }
    